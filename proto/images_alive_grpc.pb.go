// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImageAliveClient is the client API for ImageAlive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageAliveClient interface {
	ImagePull(ctx context.Context, in *ImagePullRequest, opts ...grpc.CallOption) (ImageAlive_ImagePullClient, error)
}

type imageAliveClient struct {
	cc grpc.ClientConnInterface
}

func NewImageAliveClient(cc grpc.ClientConnInterface) ImageAliveClient {
	return &imageAliveClient{cc}
}

func (c *imageAliveClient) ImagePull(ctx context.Context, in *ImagePullRequest, opts ...grpc.CallOption) (ImageAlive_ImagePullClient, error) {
	stream, err := c.cc.NewStream(ctx, &ImageAlive_ServiceDesc.Streams[0], "/proto.ImageAlive/ImagePull", opts...)
	if err != nil {
		return nil, err
	}
	x := &imageAliveImagePullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ImageAlive_ImagePullClient interface {
	Recv() (*ImagePullReply, error)
	grpc.ClientStream
}

type imageAliveImagePullClient struct {
	grpc.ClientStream
}

func (x *imageAliveImagePullClient) Recv() (*ImagePullReply, error) {
	m := new(ImagePullReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImageAliveServer is the server API for ImageAlive service.
// All implementations must embed UnimplementedImageAliveServer
// for forward compatibility
type ImageAliveServer interface {
	ImagePull(*ImagePullRequest, ImageAlive_ImagePullServer) error
	mustEmbedUnimplementedImageAliveServer()
}

// UnimplementedImageAliveServer must be embedded to have forward compatible implementations.
type UnimplementedImageAliveServer struct {
}

func (UnimplementedImageAliveServer) ImagePull(*ImagePullRequest, ImageAlive_ImagePullServer) error {
	return status.Errorf(codes.Unimplemented, "method ImagePull not implemented")
}
func (UnimplementedImageAliveServer) mustEmbedUnimplementedImageAliveServer() {}

// UnsafeImageAliveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageAliveServer will
// result in compilation errors.
type UnsafeImageAliveServer interface {
	mustEmbedUnimplementedImageAliveServer()
}

func RegisterImageAliveServer(s grpc.ServiceRegistrar, srv ImageAliveServer) {
	s.RegisterService(&ImageAlive_ServiceDesc, srv)
}

func _ImageAlive_ImagePull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ImagePullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageAliveServer).ImagePull(m, &imageAliveImagePullServer{stream})
}

type ImageAlive_ImagePullServer interface {
	Send(*ImagePullReply) error
	grpc.ServerStream
}

type imageAliveImagePullServer struct {
	grpc.ServerStream
}

func (x *imageAliveImagePullServer) Send(m *ImagePullReply) error {
	return x.ServerStream.SendMsg(m)
}

// ImageAlive_ServiceDesc is the grpc.ServiceDesc for ImageAlive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageAlive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ImageAlive",
	HandlerType: (*ImageAliveServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImagePull",
			Handler:       _ImageAlive_ImagePull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/images_alive.proto",
}
